<div>
    <div x-data="videos" class="flex items-center justify-center w-full h-auto">
        <div class="flex items-center justify-center w-full h-auto my-10">
            <div class="w-full max-w-2xl">
                <h1 class="text-2xl font-bold text-center text-blue-800">
                    Frequenza Corso n. {{ $codice }}
                </h1>
                <h2 class="mt-2 text-3xl font-extrabold tracking-tight text-center text-purple-600">
                    {{ $title }}</h2>
                <h3 class="mt-2 text-2xl font-extrabold tracking-tight text-center text-gray-500"
                    x-text="(videos[{{ $index }}].titolo).toUpperCase()"></h3>
                {{ $index }}
                <div class="w-full p-2 mt-4 bg-green-200 rounded-lg">
                    <div class="flex flex-row items-center text-gray-700">
                        <svg class="w-6 h-6 mx-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                            xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <p class="text-sm text-gray-700">Per rispondere <span class="font-bold">cliccare</span> sul
                            testo
                            della
                            risposta.</p>
                    </div>
                </div>
                <nav aria-label="Progress" class="mt-4">
                    <ol role="list" class="flex items-center">
                        <template x-for="(video, key) in videos" :key>
                            <li class="relative" :class="key == count - 1 ? '' : 'pr-8 sm:pr-20'">
                                <!-- Upcoming Step -->
                                <div class="absolute inset-0 flex items-center" aria-hidden="true">
                                    <div class="h-0.5 w-full"
                                        :class="video.completed == 1 ? 'bg-violet-600' : 'bg-gray-200'"></div>
                                </div>
                                <template x-if="video.completed == 1 && key == index">
                                    <a href="#"
                                        class="relative flex items-center justify-center w-8 h-8 bg-white border-2 rounded-full border-violet-600"
                                        aria-current="step">
                                        <span class="h-2.5 w-2.5 rounded-full bg-violet-600" aria-hidden="true"></span>
                                        <span class="sr-only" x-text="key+1"></span>
                                    </a>
                                </template>
                                <template x-if="video.completed == 1 && key != index">
                                    <a href="#"
                                        class="relative flex items-center justify-center w-8 h-8 rounded-full bg-violet-600 hover:bg-violet-900"
                                        {{-- :class="key == index ? 'border-violet-600' : 'border-gray-300'" --}}>
                                        <template x-if="key != index">
                                            <svg class="w-5 h-5 text-white" viewBox="0 0 20 20" fill="currentColor"
                                                aria-hidden="true">
                                                <path fill-rule="evenodd"
                                                    d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z"
                                                    clip-rule="evenodd" />
                                            </svg>
                                        </template>
                                </template>
                                <span class="sr-only" x-text="key+1"></span>
                                </a>
                                <template x-if="video.completed != 1">
                                    <a href="#"
                                        class="relative flex items-center justify-center w-8 h-8 bg-white border-2 rounded-full group hover:border-gray-400"
                                        {{-- :class="video.completed == 1 ? 'bg-violet-600 hover:bg-violet-900' : ''" --}}
                                        :class="key == index ? 'border-violet-600' :
                                            'border-gray-300'"
                                        aria-current="step">
                                        <span class="h-2.5 w-2.5 rounded-full"
                                            :class="key == index ? 'bg-violet-600' :
                                                'bg-transparent group-hover:bg-gray-300'"
                                            aria-hidden="true"></span>
                                        <span class="sr-only" x-text="key+1"></span>
                                    </a>
                                </template>
                            </li>
                        </template>

                    </ol>
                </nav>
                {{-- {{ $index }} --}}
                <div class="mt-6">
                    <template x-for="(video, key) in videos" :key>
                        <template x-if="key == index">
                            {{-- <video class="w-full h-auto max-w-full" controls>
                                <source :src="video.link" type="video/mp4">
                                Your browser does not support the video tag.
                            </video> --}}
                            <div class="w-full h-auto max-w-full video-container" x-ref="videoContainer"
                                x-on:fullscreenchange="">
                                <div class="playback-animation" x-ref="playbackAnimation">
                                    <svg class="playback-icons">
                                        <use href="#play-icon"></use>
                                        <use href="#pause"></use>
                                    </svg>
                                </div>

                                <video controls x-ref="video" preload="metadata" x-on:click="togglePlay($event)"
                                    x-on:pause="togglePlay($event)" x-on:playing="togglePlay($event)"
                                    x-on:seeked="skipAhead($event)"
                                    x-on:timeupdate="updateTimeElapsed(), updatePercentElapsed()">
                                    <source :src="video.link" type="video/mp4">
                                </video>
                                {{-- percentage circle  --}}
                                <div class="inline-flex items-center justify-center overflow-hidden rounded-full">
                                    <!-- Building a Progress Ring: https://css-tricks.com/building-progress-ring-quickly/ -->
                                    <svg class="w-20 h-20">
                                        <circle class="text-gray-300" stroke-width="5" stroke="currentColor"
                                            fill="transparent" r="30" cx="40" cy="40" />
                                        <circle class="text-violet-600" stroke-width="5"
                                            :stroke-dasharray="circumference"
                                            :stroke-dashoffset="circumference - percent / 100 * circumference"
                                            stroke-linecap="round" stroke="currentColor" fill="transparent"
                                            r="30" cx="40" cy="40" />
                                    </svg>
                                    <span class="absolute text-xl text-violet-700"
                                        x-effect="$el.textContent = Math.trunc((percentElapsed).toFixed(2)*100)+'%'"></span>
                                </div>
                                <div x-effect="$el.textContent=circumference"></div>
                                <div x-effect="$el.textContent=circumference - percent / 100 * circumference"></div>

                                <div x-on:mouseenter="" x-on:mouseleave="" class="hidden video-controls"
                                    x-ref="videoControls">
                                    <div class="video-progress">
                                        <progress x-ref="progressBar" min="0" max="100"
                                            value="0"></progress>
                                        <input x-on:input="" x-on:mousemove="" class="seek" x-ref="seek"
                                            min="0" max="" type="range" step="1"
                                            value="0">
                                        <div class="seek-tooltip" id="seekTooltip">00:00</div>
                                    </div>

                                    <div class="bottom-controls">
                                        <div class="left-controls">
                                            <button x-ref="play" x-on:click="togglePlay">
                                                <svg class="playback-icons">
                                                    <use href="#play-icon"></use>
                                                    <use href="#pause"></use>
                                                </svg>
                                            </button>

                                            <div class="volume-controls">
                                                <button x-on:click="" class="volume-button" id="volume-button"
                                                    x-ref="volumeButton">
                                                    <svg x-ref="volumeIcons" id="volume-icons">
                                                        <use x-ref="volumeMute" class="hidden" href="#volume-mute">
                                                        </use>
                                                        <use x-ref="volumeLow" class="hidden" href="#volume-low">
                                                        </use>
                                                        <use x-ref="volumeHigh" href="#volume-high"></use>
                                                    </svg>
                                                </button>

                                                <input x-on:input="" class="volume" id="volume" value="1"
                                                    data-mute="0.5" type="range" max="1" min="0"
                                                    step="0.01" x-ref="volume">
                                            </div>

                                            <div class="time">
                                                <time x-ref="timeElapsed">00:00</time>
                                                <span> / </span>
                                                <time x-ref="duration">00:00</time>
                                            </div>
                                        </div>

                                        <div class="right-controls">
                                            <button data-title="PIP (p)" class="pip-button" id="pip-button">
                                                <svg>
                                                    <use href="#pip"></use>
                                                </svg>
                                            </button>
                                            <button x-on:click="" class="fullscreen-button" id="fullscreen-button"
                                                x-ref="fullscreenButton">
                                                <svg>
                                                    <use href="#fullscreen"></use>
                                                    <use href="#fullscreen-exit" class="hidden"></use>
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {{-- <div class="video-container" id="video-container">
                                <div class="playback-animation" id="playback-animation">
                                    <svg class="playback-icons">
                                        <use class="hidden" href="#play-icon"></use>
                                        <use href="#pause"></use>
                                    </svg>
                                </div>

                                <video controls class="video" x-ref="video" id="video" preload="metadata"
                                    poster="poster.jpg">
                                    <source :src="video.link" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>

                                <div class="hidden video-controls" x-ref="video-controls" id="video-controls">
                                    <div class="video-progress">
                                        <progress id="progress-bar" value="0" min="0"></progress>
                                        <input class="seek" id="seek" value="0" min="0"
                                            type="range" step="1">
                                        <div class="seek-tooltip" id="seek-tooltip">00:00</div>
                                    </div>

                                    <div class="bottom-controls">
                                        <div class="left-controls">
                                            <button data-title="Play (k)" id="play">
                                                <svg class="playback-icons">
                                                    <use href="#play-icon"></use>
                                                    <use class="hidden" href="#pause"></use>
                                                </svg>
                                            </button>

                                            <div class="volume-controls">
                                                <button data-title="Mute (m)" class="volume-button"
                                                    id="volume-button">
                                                    <svg>
                                                        <use class="hidden" href="#volume-mute"></use>
                                                        <use class="hidden" href="#volume-low"></use>
                                                        <use href="#volume-high"></use>
                                                    </svg>
                                                </button>

                                                <input class="volume" id="volume" value="1" data-mute="0.5"
                                                    type="range" max="1" min="0" step="0.01">
                                            </div>

                                            <div class="time">
                                                <time id="time-elapsed">00:00</time>
                                                <span> / </span>
                                                <time id="duration">00:00</time>
                                            </div>
                                        </div>

                                        <div class="right-controls">
                                            <button data-title="PIP (p)" class="pip-button" id="pip-button">
                                                <svg>
                                                    <use href="#pip"></use>
                                                </svg>
                                            </button>
                                            <button data-title="Full screen (f)" class="fullscreen-button"
                                                id="fullscreen-button">
                                                <svg>
                                                    <use href="#fullscreen"></use>
                                                    <use href="#fullscreen-exit" class="hidden"></use>
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div> --}}
                            </template>
                    </template>
                </div>

                <div class="flex justify-between">
                    <button x-on:click="setCompleted({{ $index }}, 'completed', 1)"
                        class="px-4 py-3 my-2 text-white bg-green-500 rounded-lg">SET COMPLETATO</button>
                    <button x-on:click="setUncompleted({{ $index }}, 'completed', 0)"
                        class="px-4 py-3 my-2 text-white bg-red-500 rounded-lg">SET ZERO</button>
                </div>
                <div class="flex justify-between">
                    <button x-on:click="previousVideo"
                        class="px-4 py-3 my-2 text-white bg-gray-500 rounded-lg">PRECEDENTE</button>
                    <button x-on:click="nextVideo" x-show="videos[index]['completed'] && index < count - 1"
                        class="px-4 py-3 my-2 text-white bg-gray-500 rounded-lg"
                        :class="(videos[index]['completed'] && !videos[index + 1]['completed']) ? 'animate-pulse' : ''">SUCCESSIVO</button>
                </div>
                <div class="flex justify-center" x-show="completed == 1">
                    <button class="px-4 py-3 my-2 text-white bg-yellow-600 rounded-lg">VAI AL TEST</button>
                </div>
                <br>
                is playing: <span class="font-bold text-red-600" x-effect="$el.textContent = isPlaying"></span><br />
                time elapsed: <span class="font-bold text-red-600"
                    x-effect="$el.textContent = timeElapsed"></span><br />
                time completed: <span class="font-bold text-red-600"
                    x-effect="$el.textContent = completedTime"></span><br />
                initialize video: <span class="font-bold text-red-600"
                    x-effect="$el.textContent = initializeVideo()"></span><br />
                percent elapsed: <span class="font-bold text-red-600"
                    x-effect="$el.textContent = Math.trunc((percentElapsed).toFixed(2)*100)+'%'"></span><br />
                current time: <span class="font-bold text-red-600"
                    x-effect="$el.textContent = currentTime"></span><br />
                seek: <span class="font-bold text-red-600" x-effect="$el.textContent = seek"></span><br />
                progress bar: <span class="font-bold text-red-600" x-effect="$el.textContent = progressBar"></span>
            </div>
        </div>
        {{-- start modal  --}}
        {{-- <template x-if="compliancePopup"> --}}
        @if ($compliancePopup)
            <div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">
                <div class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75"></div>
                <div class="fixed inset-0 z-10 overflow-y-auto">
                    <div class="flex items-end justify-center min-h-full p-4 text-center sm:items-center sm:p-0">
                        <div
                            class="relative px-4 pt-5 pb-4 overflow-hidden text-left transition-all transform bg-white rounded-lg shadow-xl sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                            <div>
                                <div
                                    class="flex items-center justify-center w-12 h-12 mx-auto bg-green-100 rounded-full">
                                    <svg class="w-6 h-6 text-green-600" fill="none" viewBox="0 0 24 24"
                                        stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                        <path stroke-linecap="round" stroke-linejoin="round"
                                            d="M4.5 12.75l6 6 9-13.5" />
                                    </svg>
                                </div>
                                <div class="mt-3 text-center sm:mt-5">
                                    <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">
                                        Controllo
                                        Conformità Frequenza Corso</h3>
                                    <div class="mt-2 space-y-2">
                                        <p class="text-sm text-gray-500">Stai vedendo questo "pop-up" ai fini della
                                            "compliance" che gli ordini professionali impongono per l'attestazione della
                                            frequenza a distanza dei corsi in modalità asincrona/P.O.D. (Play On Demand)
                                        </p>
                                        <p class="text-sm text-gray-500">Le interazioni con questa questo "pop up"
                                            verranno
                                            registrati sui nostri sistemi ai fini di controllo.</p>
                                        <p class="text-sm text-gray-500">Se non sei interessato ai "Crediti Formativi
                                            Professionali" puoi utilizzare il link del canale Youtube fornito in calce
                                            alla pagina.</p>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                                <button x-on:click="closeCompliacePopup()" type="button"
                                    class="inline-flex justify-center w-full px-3 py-2 text-sm font-semibold text-white bg-indigo-600 rounded-md shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:col-start-2">Ok
                                    Prosegui </button>
                                <button x-on:click="closeCompliacePopup()" type="button"
                                    class="inline-flex justify-center w-full px-3 py-2 mt-3 text-sm font-semibold text-gray-900 bg-white rounded-md shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0">Cancella</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            </template>
        @endif
        {{-- end modal  --}}
    </div>
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('videos', function() {
                window.localStorage.removeItem('_x_id_attendance')
                window.localStorage.removeItem('_x_codice')
                window.localStorage.removeItem('_x_course_id')
                window.localStorage.removeItem('_x_course_uuid')
                window.localStorage.removeItem('_x_index')
                window.localStorage.removeItem('_x_videos')
                window.localStorage.removeItem('_x_completed')
                window.localStorage.removeItem('_x_dateTimeCompleted')
                window.localStorage.removeItem('_x_count')
                window.localStorage.removeItem('_x_compliancePopup')
                window.setInterval(() => {
                    test = false;
                    if (test) {
                        let istante = new Date()
                        window.localStorage.setItem('_x_compliancePopup', true)
                        @this.openCompliance()
                        console.log(istante)
                    } else {
                        return
                    }
                }, Math.round(Math.random() * (20000 - 5000)) + 5000)
                return {
                    id_attendance: this.$persist({{ $id_attendance }}),
                    codice: this.$persist('{{ $codice }}'),
                    course_id: this.$persist({{ $course_id }}),
                    course_uuid: this.$persist('{{ $course_uuid }}'),
                    index: this.$persist({{ $index }}),
                    videos: this.$persist(<?php echo $videos_json; ?>),
                    completed: this.$persist({{ $completed }}),
                    dateTimeCompleted: this.$persist(<?php echo $dateTimeCompleted; ?>),
                    count: this.$persist({{ count(json_decode($videos_json)) }}),
                    compliancePopup: this.$persist({{ $compliancePopup }}),
                    isPlaying: false,
                    videoDuration: null,
                    timeElapsed: null,
                    currentTime: 0,
                    percentElapsed: 0,
                    seek: 0,
                    progressBar: 0,
                    completedTime: Alpine.$persist(5).as('completed'),
                    circumference: 30 * 2 * Math.PI,
                    percent: 0,
                    answered(e) {
                        this.selectedAnswer = e.target.value
                        this.questions[this.index]['givenAnswer'] = this.selectedAnswer
                        if (this.questions[this.index]['givenAnswer'] == this.questions[this.index][
                                'correctAnswer'
                            ]) {
                            this.questions[this.index]['point'] = 1
                        } else {
                            this.questions[this.index]['point'] = 0
                        }
                    },
                    nextVideo() {
                        if (this.isPlaying = true) {
                            this.isPlaying = false
                        }
                        this.currentTime = 0
                        this.index++
                        if (this.index > this.count - 1) {
                            this.index = this.count - 1
                            this.nextVisible = 0
                        }
                        @this.update(this.id_attendance, this.codice, this.course_id, this.course_uuid, this
                            .index, this.videos, this.completed, this.dateTimeCompleted)
                        location.reload()
                    },
                    previousVideo() {
                        if (this.isPlaying = true) {
                            this.isPlaying = false
                        }
                        this.currentTime = 0
                        this.index--
                        if (this.index < 0) {
                            this.index = 0
                        }
                        @this.update(this.id_attendance, this.codice, this.course_id, this.course_uuid, this
                            .index, this.videos, this.completed, this.dateTimeCompleted)
                        location.reload()
                    },
                    setCompleted(index, prop, value) {
                        if (index == this.count - 1) {
                            this.completed = 1
                        }
                        this.videos[index][prop] = value
                        @this.update(this.id_attendance, this.codice, this.course_id, this.course_uuid, this
                            .index, this.videos, this.completed, this.dateTimeCompleted)
                    },
                    setUncompleted(index, prop, value) {
                        if (index == this.count - 1) {
                            this.completed = 0
                        }
                        this.videos[index][prop] = value
                        @this.update(this.id_attendance, this.codice, this.course_id, this.course_uuid, this
                            .index, this.videos, this.completed, this.dateTimeCompleted)
                    },
                    closeCompliacePopup() {
                        this.compliancePopup = false
                        @this.closeCompliance()
                    },
                    showResults() {
                        this.submitted = true
                        this.dateTimeSubmitted = new Date().toLocaleString()

                        this.totalScore = this.questions.reduce(function(previousValue, currentValue) {
                            return previousValue + currentValue.point
                        }, 0)

                        this.blank = this.questions.filter(function(options) {
                            return options.givenAnswer === ''
                        }).length

                        this.wrongAnswers = this.questions.filter(function(options) {
                            if (options.givenAnswer != '') {
                                return options.givenAnswer != options.correctAnswer
                            }
                        }).length
                    },
                    updateResults() {
                        if (!this.submitted) {
                            this.dateTimeSubmitted = new Date().toLocaleString()

                            this.totalScore = this.questions.reduce(function(previousValue, currentValue) {
                                return previousValue + currentValue.point
                            }, 0)

                            this.blank = this.questions.filter(function(options) {
                                return options.givenAnswer === ''
                            }).length

                            this.wrongAnswers = this.questions.filter(function(options) {
                                if (options.givenAnswer != '') {
                                    return options.givenAnswer != options.correctAnswer
                                }
                            }).length
                        }
                    },
                    resetQuiz() {
                        this.index = 0
                        this.review = true
                    },
                    initializeVideo() {},
                    formatTime(timeInSeconds) {},
                    togglePlay(event) {
                        if (event.type === "pause") {
                            console.log("paused");
                            this.isPlaying = false
                        } else if (event.type === "playing") {
                            console.log("playing");
                            this.isPlaying = true
                        }
                    },
                    skipAhead(event) {
                        console.log(this.$refs.video.currentTime)
                    },
                    updateTimeElapsed() {
                        const time = this.formatTime(Math.round(this.$refs.video.currentTime))
                        this.currentTime = this.$refs.video.currentTime
                        if (this.$refs.video.currentTime > this.completedTime) {
                            this.completedTime = this.$refs.video.currentTime
                        }
                        this.$refs.timeElapsed.innerText = `${time.minutes}:${time.seconds}`
                        this.$refs.timeElapsed.setAttribute('datetime', `${time.minutes}m ${time.seconds}s`)
                        this.timeElapsed = `${time.minutes}:${time.seconds}`
                        // return `${time.minutes}:${time.seconds}`
                    },
                    formatTime(timeInSeconds) {
                        const result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8)
                        return {
                            minutes: result.substr(3, 2),
                            seconds: result.substr(6, 2)
                        }
                    },
                    updatePercentElapsed() {
                        const videoDuration = Math.round(this.$refs.video.duration)
                        const time = Math.round(this.$refs.video.currentTime)
                        this.percentElapsed = time / videoDuration
                        this.percent = Math.trunc((this.percentElapsed).toFixed(2) * 100)

                        if (this.percentElapsed > 0.99) {
                            console.log(this.index, 'completed', 1)
                            this.setCompleted(this.index, 'completed', 1)
                        }
                        return time / videoDuration
                    },
                }
            })
        })
    </script>
</div>
